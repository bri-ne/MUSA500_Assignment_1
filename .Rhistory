#remember to use 1+ if any variable has zero values
#the only variable that does not have a 0 value is MEDHVAL
ourdata$LNMEDHVAL <- log(ourdata$MEDHVAL)
ourdata$LNPCTBACHMOR <- log(1+ourdata$PCTBACHMOR)
ourdata$LNBELPOV100 <- log(1+ourdata$NBELPOV100)
ourdata$LNPCTVACANT <- log(1+ourdata$PCTVACANT)
ourdata$LNPCTSINGLES <- log(1+ourdata$PCTSINGLES)
#### Logged
LNhists <- histogram( ~ LNMEDHVAL +LNPCTBACHMOR +LNBELPOV100 +LNPCTSINGLES +LNPCTVACANT,layout=c(2,3),data = ourdata,
main='Distribution of Natural Log of Variables', sub= 'Figure 2', col="#B3CDE3", breaks = 50, scales='free')
summary_table
hists
LNhists
#### THIS CHUNK INCLUDES THE MAPPING & JENKS CODE ###
#---- Step 2A: Open Regression_Data shapefile (or GeoJSON in our case)----
#shapefiles are really hard to work with without having to download and mess with working directories in the code
#SO i converted the shapefile to a GeoJSON and will use that instead
ourdata_geom <- st_read("https://raw.githubusercontent.com/bri-ne/MUSA500_Assignment_1/main/RegressionData.geojson")
#getting Jenks Breaks for LNMEDHVAL
classes <- classIntervals(ourdata_geom$LNMEDHVAL, n = 5, style = "jenks")
classes$brks
#we'll create a new column in our sf object using the base R cut() function to cut up our percent variable into distinct groups.
ourdata_geom <- ourdata_geom %>%
mutate(LNMEDVHAL_class = cut(LNMEDHVAL, classes$brks, include.lowest = T))
#mapping
choro_LNMEDHVAL <- ggplot() +
geom_sf(data = ourdata_geom,
aes(fill = LNMEDVHAL_class),
alpha = 1,
colour = "gray80",
size = 0.15) +
scale_fill_brewer(palette = "PuBu",
name = "LN Median House Value") +
labs(x = NULL, y = NULL,
title = "LN Median House Value in Philadelphia by Block Group",
subtitle = "Source: U.S. Census",
caption = "Map 1") +
theme(line = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.background = element_blank())
#making remaining JENKS for maps --------------------
#PctVacant Jenks
PVclasses <- classIntervals(ourdata_geom$PCTVACANT, n = 5, style = "jenks")
PVclasses$brks
ourdata_geom <- ourdata_geom %>%
mutate(PCTVACANT_class = cut(PCTVACANT, PVclasses$brks, include.lowest = T))
#PctSingle Jenks
PSclasses <- classIntervals(ourdata_geom$PCTSINGLES, n = 5, style = "jenks")
PSclasses$brks
ourdata_geom <- ourdata_geom %>%
mutate(PCTSINGLES_class = cut(PCTSINGLES, PSclasses$brks, include.lowest = T))
#PctBach Jenks
PBclasses <- classIntervals(ourdata_geom$PCTBACHMOR, n = 5, style = "jenks")
PBclasses$brks
ourdata_geom <- ourdata_geom %>%
mutate(PCTBACHMOR_class = cut(PCTBACHMOR, PBclasses$brks, include.lowest = T))
#LNBelPov Jenks
BPclasses <- classIntervals(ourdata_geom$LNNBELPOV, n = 3, style = "jenks")
BPclasses$brks
ourdata_geom <- ourdata_geom %>%
mutate(LNNBELPOV_class = cut(LNNBELPOV, BPclasses$brks, include.lowest = T))
#mapping the rest --------------------------------------
#PctVacant Map
choro_PctVac <- ggplot() +
geom_sf(data = ourdata_geom,
aes(fill = PCTVACANT_class),
#alpha = 1,
colour = NA) +
scale_fill_brewer(palette = "PuBu",
name = "Percent Houses Vacant") +
labs(x = NULL, y = NULL,
subtitle = "Perecent of Vacant Houses\nin Philadelphia by Block Group") +
theme(line = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.background = element_blank())
#PctSing Map
choro_PctSing <- ggplot() +
geom_sf(data = ourdata_geom,
aes(fill = PCTSINGLES_class),
#alpha = 1,
colour = NA) +
scale_fill_brewer(palette = "PuBu",
name = "Percent Single House Units") +
labs(x = NULL, y = NULL,
subtitle = "Perecent of Single House Units\nin Philadelphia by Block Group") +
theme(line = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.background = element_blank())
#PctBach Map
choro_PctBach <- ggplot() +
geom_sf(data = ourdata_geom,
aes(fill = PCTBACHMOR_class),
#alpha = 1,
colour = NA) +
scale_fill_brewer(palette = "PuBu",
name = "Percent Bachelors Degree") +
labs(x = NULL, y = NULL,
subtitle = "Percent of Individuals with a Bachelors\nDegree or Higher in Philadelphia\nby Block Group") +
theme(line = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.background = element_blank())
#LNBelPov Map
choro_LNBelPov <- ggplot() +
geom_sf(data = ourdata_geom,
aes(fill = LNNBELPOV_class),
#alpha = 1,
colour = NA) +
scale_fill_brewer(palette = "PuBu",
name = "LN Percent Households\nin Poverty") +
labs(x = NULL, y = NULL,
subtitle = "LN Percent of Households Living\nin Poverty in Philadelphia\nby Block Group",
caption = "Map 2. Source: U.S. Census") +
theme(line = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.background = element_blank())
#--- Unfortunately I had to do three breaks b/c the values for the LN %BELPOV were not varied enough
mapgrid <- plot_grid( choro_PctVac,
choro_PctSing,
choro_PctBach,
choro_LNBelPov,
align = c("hv","hv","hv","hv"),
ncol = 2, nrow = 2)
choro_LNMEDHVAL
mapgrid
choro_LNMEDHVAL
mapgrid
#### THIS CHUNK INCLUDE CORR CODE AND OUTPUT
#---- Step 1C: Pearson Correlations ----
#make new df that just has our predictors and dependent variable
pred_var <- ourdata%>%dplyr::select(LNMEDHVAL, LNBELPOV100, PCTBACHMOR, PCTSINGLES, PCTVACANT)
pcorr <- cor(pred_var, method="pearson")
#Observe that there isnt severe multicollinearity (i.e., no correlations where
# r>.8 or r<-.8), so we can include all four predictors in the regression.
#*********matrix for markdown*****************************************
pcorr <- pcorr%>%kable(digits = c(4, 4, 4, 4, 4),
align = c("l", "r", "r", "r", "r"))%>%kable_styling()%>%footnote(general_title = "Pearson's Correlation of Predictors",
general = "Table 2")
pcorr
#---- Step 3 : Regression Analysis -------
#Run regression model
#fit <- lm(MEDHVAL ~ LNBELPOV100 + PCTBACHMOR + PCTVACANT + PCTSINGLES, data=ourdata)
fit <- lm(LNMEDHVAL ~ LNBELPOV100 + PCTBACHMOR + PCTVACANT + PCTSINGLES, data=ourdata)
summary(fit)
#3A
fit.summary<- broom::tidy(fit)%>%
kable(
align = c("l", "r", "r", "r", "r"))%>%kable_styling()%>%footnote(general_title = "Regression Summary",
general = "Table 3")
#displays the summary statistics and R squared
fit.stats<- glance(fit)%>%kable(col.names= c("r.squared", "adj.r.squared", "sigma", "f.statistic", "p.value", "df", "logLik", "AIC", "BIC", "deviance", "df.residual", "nobs"))%>%kable_styling()%>%footnote(general_title = "Regression Summary",
general = "Table 4")
#Summary of Regression
#all predictors are significant - p value < 0.05
#R squared - 55.38% = % of variance in median house value explained
#by predictors
#Adjusted R Squared - 55.28% = % of variance in median house value explained
#BY predictors adjusted for the number of predictors
#P value associated with F-ratio of 532 is less than 0.0001 -
#We can reject the H0 that all Beta coefficients for the predictors are 0
#3B
anova.fit<- broom::tidy(anova(fit))%>%kable(digits = c(0, 4, 4, 4, 4),
align = c("l", "r", "r", "r", "r", "r"))%>%kable_styling()%>%footnote(general_title = "ANOVA",
general = "Table 5")
#ANOVA table containing SSE and SSR
#SSR = SS(LNBELPOV100) + SS(PCTBACHMOR) +SS(PCTVACANTS) + SS(PCTSINGLES) =
# 869866100108 + 2345334804156 +  58030777316 + 154801231763 = 3428032913343
# Amount of total variance in Median House value explained by model
#SSE = 2761620505240 = amount of total variance in median house value that is
# unexplained by the model
#3C
#new column saving predicted values
ourdata$predvals <- fitted(fit)
#new column saving residuals
ourdata$resids <- residuals(fit)
#New column saving standardized residuals
ourdata$stdres <- rstandard(fit)
#3D Create a scatterplot with standardized residuals on Y axis and
# Predicted Values on x axis.
ResidualPlot<- ggplot(ourdata, aes(x = predvals, y= stdres))+
geom_point(size=1.5, color = 'darkslateblue', alpha = .5)+
geom_hline(yintercept=0, size = .5)+
labs(x = 'Predicted LN Median House Value',
y = 'Standardized Residuals',
caption = 'Figure 4')
fit.summary
fit.stats
anova.fit
#### THIS CHUNK INCLUDE SCATTER PLOT CODE ####
#---- Step 1B: Variable Scatter Plots ----
#investigate to see if our predictors relationship with the dependent variable
# is linear by plotting as scatter plots
pLNBelpov <- ggplot(ourdata, aes(x = LNMEDHVAL, y= LNBELPOV100))+
geom_point(size=2.5, color = "#4D004B", alpha = 0.5)+theme_minimal()
pBach <- ggplot(ourdata, aes(x = LNMEDHVAL, y= PCTBACHMOR))+
geom_point(size=2.5, color = "#4D004B", alpha = 0.5)+theme_minimal()
pVac <- ggplot(ourdata, aes(x = LNMEDHVAL, y= PCTVACANT))+
geom_point(size=2.5, color = "#4D004B", alpha = 0.5)+theme_minimal()
pSing <- ggplot(ourdata, aes(x = LNMEDHVAL, y= PCTSINGLES))+
geom_point(size=2.5, color = "#4D004B", alpha = 0.5)+theme_minimal()+labs(caption="Figure 3")
scattergrid <- plot_grid(
pLNBelpov,
pBach,
pVac,
pSing,
labels = c("% Below Poverty (LN)",
"Bachelors Degree",
"% Vacant Homes",
"% Single House Units"),
label_size = 11,
label_x =-.1,
label_y = 1.03,
scale= 0.9,
align = 'hv',
ncol = 2, nrow = 2)
#### THIS CHUNK INCLUDE SCATTER PLOT CODE ####
#---- Step 1B: Variable Scatter Plots ----
#investigate to see if our predictors relationship with the dependent variable
# is linear by plotting as scatter plots
pLNBelpov <- ggplot(ourdata, aes(x = LNMEDHVAL, y= LNBELPOV100))+
geom_point(size=2.5, color = "#4D004B", alpha = 0.5)+theme_minimal()
pBach <- ggplot(ourdata, aes(x = LNMEDHVAL, y= PCTBACHMOR))+
geom_point(size=2.5, color = "#4D004B", alpha = 0.5)+theme_minimal()
pVac <- ggplot(ourdata, aes(x = LNMEDHVAL, y= PCTVACANT))+
geom_point(size=2.5, color = "#4D004B", alpha = 0.5)+theme_minimal()
pSing <- ggplot(ourdata, aes(x = LNMEDHVAL, y= PCTSINGLES))+
geom_point(size=2.5, color = "#4D004B", alpha = 0.5)+theme_minimal()+labs(caption="Figure 3")
scattergrid <- plot_grid(
pLNBelpov,
pBach,
pVac,
pSing,
labels = c("% Below Poverty (LN)",
"Bachelors Degree",
"% Vacant Homes",
"% Single House Units"),
label_size = 11,
label_x =-.1,
label_y = 1.03,
scale= 0.9,
align = 'hv',
ncol = 2, nrow = 2)
scattergrid
stdr.reshist <-  histogram( ~ stdres,data = ourdata,
main='Standardized Regression Residuals Histogram',
sub= 'Figure 4',
col="#B3CDE3",
breaks = 50,
scales='free')
stdr.reshist
ResidualPlot<- ggplot(ourdata, aes(x = predvals, y= stdres))+
geom_point(size=1.5, color = 'darkslateblue', alpha = .5)+
geom_hline(yintercept=0, size = .5)+
labs(title = 'Standardized Residual by Predicted Value',
x = 'Predicted Median House Value ($)',
y = 'Standardized Residuals',
caption = 'Figure 5')
ResidualPlot
#In the output:
#Predicted (Predicted values using all observations)
#cvpred (cross-validation predictions)
#CV residual = y (in this case, MEDHHINC) - cvpred
cv <- CVlm(data=ourdata, fit, m=5)
#Extracting MSEs
mse <- attr(cv, "ms")
mse
rmse <- sqrt(mse)
rmse
#CROSS-VALIDATION
#Model 2
fit2 <- lm(LNMEDHVAL ~ MEDHHINC + PCTVACANT , data=ourdata)
summary(fit2)
anova(fit2)
#Model
#fit <- lm(MEDHHINC ~ PCTVACANT + MEDHVAL + PCTSINGLES, data=ourdata)
#summary(fit)
#anova(fit)
cv2 <- CVlm(data=ourdata, fit2, m=5)
#Extracting MSEs
mse2 <- attr(cv2, "ms")
mse2
rmse2 <- sqrt(mse2)
rmse2
#----Step 6 ----
#new column saving predicted values
ourdata$predvals2 <- fitted(fit2)
#adding to geom too for mapping
ourdata_geom$predvals2 <- fitted(fit2)
ourdata_geom$predvals <- fitted(fit) #### from our first model
#new column saving residuals
ourdata$resids2 <- residuals(fit2)
#adding to geom too for mapping
ourdata_geom$resids2 <- residuals(fit2)
ourdata_geom$resids <- residuals(fit) #### from our first model
#New column saving standardized residuals
ourdata$stdres2 <- rstandard(fit2)
#adding to geom too for mapping
ourdata_geom$stdres2 <- rstandard(fit2)
ourdata_geom$stdres <- rstandard(fit)#### from our first model
#### I'm not sure we need this scatter plot -- BRi
# Create a scatterplot with standardized residuals on Y axis and
# Predicted Values on x axis.
#ResidualPlot2<- ggplot(ourdata, aes(x = predvals2, y= stdres2))+
#  geom_point(size=1.5, color = 'darkslateblue', alpha = .5)+
#  geom_hline(yintercept=0, size = .5)+
#  labs(x = 'Predicted Median House Value ($)',
#       y = 'Standardized Residuals')
#ResidualPlot2
#### we do need this Histogram though right?--- Bri #########
#Residhists <- histogram( ~ stdres +stdres2,layout=c(2,1),data = ourdata,
#                      main='Standardized Regression Residuals From Both Models', #xlab='regressing on all variables (LEFT) and regressing on only income and vacancy (RIGHT)', sub= 'Figure 3', col="#B3CDE3", breaks = 50, scales='free')
#Residhists
##############
#getting Jenks Breaks for LNMEDHVAL
standres2classes <- classIntervals(ourdata_geom$stdres2, n = 5, style = "jenks")
standres2classes$brks
typeof(ourdata_geom$stdres2)
#we'll create a new column in our sf object using the base R cut() function to cut up our percent variable into distinct groups.
ourdata_geom <- ourdata_geom %>%
mutate(stdresclass2 = cut(stdres2, standres2classes$brks, include.lowest = T))
####### Second Resid Map if we need it ###################
choro_stdresclass2 <- ggplot() +
geom_sf(data = ourdata_geom,
aes(fill = stdresclass2),
alpha = 1,
colour = NA,
size = 0.15) +
scale_fill_brewer(palette = "PuBu",
name = "LN Median House Value") +
labs(x = NULL, y = NULL,
title = "Standardized Residuals for Our Second Model\n in Philadelphia by Block Group",
subtitle = "Source: U.S. Census",
caption= "Map 4") +
theme(line = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.background = element_blank())
#choro_stdresclass2
##############################################################
#### doing this for our first model's resids just in case,
#getting Jenks Breaks for LNMEDHVAL
standresclasses <- classIntervals(ourdata_geom$stdres, n = 5, style = "jenks")
standresclasses$brks
typeof(ourdata_geom$stdres)
#we'll create a new column in our sf object using the base R cut() function to cut up our percent variable into distinct groups.
ourdata_geom <- ourdata_geom %>%
mutate(stdresclass = cut(stdres, standresclasses$brks, include.lowest = T))
#mapping
choro_stdresclass <- ggplot() +
geom_sf(data = ourdata_geom,
aes(fill = stdresclass),
alpha = 1,
colour = NA,
size = 0.15) +
scale_fill_brewer(palette = "PuBu",
name = "LN Median House Value") +
labs(x = NULL, y = NULL,
title = "Standardized Residuals in Philadelphia by Block Group",
subtitle = "Source: U.S. Census",
caption= "Map 3") +
theme(line = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
panel.background = element_blank())
choro_stdresclass
stdres_maps_both <- plot_grid( choro_stdresclass,
choro_stdresclass2,
#labels = c("% Below Poverty (LN)",
#        "Bachelors Degree",
#       "% Vacant Homes",
#      "% Single House Units"),
#label_x =-.1,
#label_y = 1.01,
scale= 0.9,
align = 'hv',
ncol = 2, nrow = 1)
stdres_maps_both
glance(fit)
glance(fit)
fit
summary(fit)
sum<-summary(fit)
fit.stats2<- glance(sum)%>%kable(col.names= c("r.squared", "adj.r.squared", "sigma", "f.statistic", "p.value", "df", "logLik", "AIC", "BIC", "deviance", "df.residual", "nobs"))%>%kable_styling()%>%footnote(general_title = "Regression Summary",
general = "Table 4")
fit.stats2<- glance(sum)%>%kable()%>%kable_styling()%>%footnote(general_title = "Regression Summary",
general = "Table 4")
fit.stats2
fit.stats2<- glance(sum)%>%kable(digits=c(4,4,4,4,10,1,5,5))%>%kable_styling()%>%footnote(general_title = "Regression Summary",
general = "Table 4")
fit.stats2
summary(fit)
choro_stdresclass
#use step and step$anova commands in the MASS library to run stepwise
#regression and determine the best model based on the Akaike Information
#Criterion. Save the step$anova output
step <- stepAIC(fit, direction="both")
# Save output of step$anova for markdown!
stepoutput <- step$anova
steptable<- kbl(stepoutput)%>%
kable_material%>%footnote(general_title = "Stepwise ANOVA",general= "Table 5")
steptable
#In the output:
#Predicted (Predicted values using all observations)
#cvpred (cross-validation predictions)
#CV residual = y (in this case, MEDHHINC) - cvpred
cv <- CVlm(data=ourdata, fit, m=5)
#Extracting MSEs
mse <- attr(cv, "ms")
mse
rmse <- sqrt(mse)
rmse
#CROSS-VALIDATION
#Model 2
fit2 <- lm(LNMEDHVAL ~ MEDHHINC + PCTVACANT , data=ourdata)
summary(fit2)
anova(fit2)
#Model
#fit <- lm(MEDHHINC ~ PCTVACANT + MEDHVAL + PCTSINGLES, data=ourdata)
#summary(fit)
#anova(fit)
cv2 <- CVlm(data=ourdata, fit2, m=5)
#Extracting MSEs
mse2 <- attr(cv2, "ms")
mse2
rmse2 <- sqrt(mse2)
rmse2
#### PREPPING TABLES
fit2.summary<- broom::tidy(fit2)%>%
kable(
align = c("l", "r", "r", "r", "r"))%>%kable_styling()%>%footnote(general_title = "Regression Summary",
general = "Table 6")
#displays the summary statistics and R squared
fit2.stats<- glance(fit2)%>%kable(col.names= c("r.squared", "adj.r.squared", "sigma", "f-statistic", "p.value", "df", "logLik", "AIC", "BIC", "deviance", "df.residual", "nobs"))%>%kable_styling()%>%footnote(general_title = "Regression Summary",
general = "Table 7")
anova.fit2<- broom::tidy(anova(fit2))%>%kable(digits = c(0, 4, 4, 4, 4),
align = c("l", "r", "r", "r", "r", "r"))%>%kable_styling()%>%footnote(general_title = "ANOVA",
general = "Table 8")
glance(mse)
summary(mse)
summary(cV2)
summary(cv2)
summary(mse)
broom::tidy(mse)
broom::tidy(mse)
mse
broom::tidy(mse)
broom::tidy(attr(cv2, "ms"))
msecol <- list(mse,mse2)
rmsecol <- list(Rmse,Rmse2)
rmsecol <- list(rmse,rmse2)
mse.table$mse <-msecol
mse.table <- data.frame(mse=msecol, rmse = rmsecol)
mse.table
mse.table
mse.table <- data.frame("mse"=msecol, "rmse" = rmsecol)
mse.table
mse.table <- data.frame("mse"=list(mse,mse2), "rmse" = list(rmse,rmse2))
mse.table
mse.table2 <- matrix(msecol, rmsecol, ncol=2)
mse.table2 <- matrix(mse,mse2,rmse,rmse2, ncol=2)
mse.table2 <- matrix(list(mse,mse2,rmse,rmse2), ncol=2)
mse.table2
mse
rmse
mse.table <- matrix(list(mse,mse2,rmse,rmse2), ncol=2)
colnames(mse.table) <- c('mse', 'rmse')
rownames(mse.table) <- c('regression 1\n(4 vars)', 'regression 2\n(2 vars)')
mse.table
rownames(mse.table) <- c('regression.1 (4 vars)', 'regression.2 (2 vars)')
mse.table
kable(mse.table)
mse.table <- mse.table%>%kable(digits=5)%>%kable_styling()
mse.table
mse.table <- mse.table%>%kable(digits=c(5,5))%>%kable_styling()
mse.table <- matrix(list(mse,mse2,rmse,rmse2), ncol=2)
colnames(mse.table) <- c('mse', 'rmse')
rownames(mse.table) <- c('regression.1 (4 vars)', 'regression.2 (2 vars)')
mse.tableK <- mse.table%>%kable(digits=c(5,5))%>%kable_styling()
mse.tableK
mse.tableK <- mse.table%>%kable(digits=c(5,5,5))%>%kable_styling()
mse.tableK
typeof(mse.tableK$mse)
typeof(mse.table$mse)
mse.table$mse
mse.table%>%as.numeric()
mse.table <- matrix(list(mse,mse2,rmse,rmse2), ncol=2)%>%as.numeric()
colnames(mse.table) <- c('mse', 'rmse')
rownames(mse.table) <- c('regression.1 (4 vars)', 'regression.2 (2 vars)')
mse.table <- matrix(as.numeric(list(mse,mse2,rmse,rmse2)), ncol=2)
colnames(mse.table) <- c('mse', 'rmse')
rownames(mse.table) <- c('regression.1 (4 vars)', 'regression.2 (2 vars)')
mse.table
mse.tableK <- mse.table%>%kable(digits=c(5,5))%>%kable_styling()
mse.tableK
mse.tableK <- mse.table%>%kable(digits=c(5,5))%>%kable_styling()%>%
footnote(general_title = "Errors For Both Regressions",
general = "Table 9")
mse.tableK <- mse.table%>%kable(digits=c(5,5))%>%kable_styling( full_width=F)%>%
footnote(general_title = "Errors For Both Regressions",
general = "Table 9")
mse.tableK
### to compare in writing
summary(mse)
print("kool")
((e^0.0209)-1)*100
(exp(0.0209)-1)*100
(exp(0.0191)-1)*100
(exp(0.0029)-1)*100
